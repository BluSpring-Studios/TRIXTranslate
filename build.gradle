plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'io.ktor.plugin' version '2.3.11'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.parchmentmc.org"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "clojars.org"
        url = uri("https://repo.clojars.org")
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url = 'https://maven.maxhenkel.de/repository/public'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_snapshot}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    //shadow(api("edu.cmu.sphinx:sphinx4-core:5prealpha-SNAPSHOT"))
    //shadow(api("edu.cmu.sphinx:sphinx4-data:5prealpha-SNAPSHOT"))
    shadow(api("net.clojars.suuft:libretranslate-java:1.0.5"))
    shadow(api('org.java-websocket:Java-WebSocket:1.5.7'))

    shadow(implementation("io.ktor:ktor-server-core-jvm:2.3.11"))
    shadow(implementation("io.ktor:ktor-server-netty-jvm:2.3.11"))

    implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"
    modRuntimeOnly "maven.modrinth:simple-voice-chat:fabric-${voicechat_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "fabric_kotlin_version", project.fabric_kotlin_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "fabric_kotlin_version": project.fabric_kotlin_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("dev-shadow")

    exclude "kotlin/**/*", "kotlinx/**/*", "org/intellij/**/*", "org/jetbrains/**/*", "com/google/**/*", "org/slf4j/**/*"

    // required cuz otherwise it just breaks
    application {
        mainClass.set("ThisDoesNotFuckingExist")
    }

    def packageName = "xyz.bluspring.unitytranslate.shade"
    //def relocatePackages = ["com.typesafe", "net.suuft", "org.eclipse", "org.fusesource", "org.java_websocket"]
    /*for (final def pkg in relocatePackages) {
        relocate(pkg, "${packageName}.${pkg}")
    }*/
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
